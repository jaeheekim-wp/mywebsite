---
title: "LS 빅데이터 스쿨 HW7"
author : "재희"
date : "2024-09-02"
categories : [bigdata]
jupyter: python3
---
# ADP 표본점수

### 2022년에 실시 된 ADP 실기 시험의 통계파트 표준점수는 평균이 30, 표준편차가 5인 정규분포를 따른다고 한다.
### 1) ADP 실기 시험의 통계파트 표준점수의 밀도함수를 그려보세요.

```{python}

# X ∼ N(30, 5^2)
import numpy as np
from scipy.stats import norm
import matplotlib.pyplot as plt

x = np.arange(10,50,0.1)
y = norm.pdf(x, loc = 30, scale = 5)

plt.plot(x, y)
plt.show()

```

### 2) ADP 수험생을 임의로 1명을 선택하여 통계 점수를 조회했을때 45점 보다 높은 점수를 받았을 확률을 구하세요.
```{python}
# P(x>45)
adp_x = 1 - norm.cdf(45, loc = 30, scale = 5)
adp_x
```


### 3) 슬통이는 상위 10%에 해당하는 점수를 얻었다고 한다면, 슬통이의 점수는 얼마인지 계산해보세요.
```{python}
# P(X>45)
score = norm.ppf(0.90, loc=30, scale=5)
score
```

### 4) 슬기로운 통계생활의 해당 회차 수강생은 16명이었다고 한다. 16명의 통계 파트 점수를 평균 내었을 때, 이 평균값이 따르는 분포의 확률밀도 함수를 1번의 그래프와 겹쳐 그려보세요.
```{python}
# 표본 평균
# X_VAR ∼ N(30, 5^2/16)

x = np.arange(10,50,0.1)
y = norm.pdf(x, loc=30, scale=5)

plt.plot(x, y, color='black')

y2 = norm.pdf(x, loc=30, scale=5/np.sqrt(16))

plt.plot(x, y2, color='red')
plt.show()

```

### 5) 슬기로운 통계생활 ADP 반 수강생들의 통계점수를 평균내었다고 할 때, 이 값이 38점보다 높게 나올 확률을 구하세요.
```{python}

# 표본 평균
# X_VAR ∼ N(30, 5^2/16)
# # P(X_VAR > 38)

adp_score = 1 - norm.cdf(38, loc=30, scale=5/np.sqrt(16))
adp_score

```

# Covid 19 발병률

### Covid‑19의 발병률은 1%라고 한다. 다음은 이번 코로나 사태로 인하여 코로나 의심 환자들 1,085명을 대상으로 슬통 회사의 “다잡아” 키트를 사용하여 양성 반응을 체크한 결과이다.

```{python}

import pandas as pd

# 데이터를 Pandas DataFrame으로 생성
data = {
    "실제 \\ 키트": ["양성", "음성", "합계"],
    "양성": [370, 15, 385],
    "음성": [10, 690, 700],
    "합계": [380, 705, 1085]
}

df = pd.DataFrame(data)
df
```


### 1) 다잡아 키트가 코로나 바이러스에 걸린 사람을 양성으로 잡아낼 확률을 계산하세요.
```{python}
# P(키트 양성 | 실제 양성)
370 / 385

```

### 2) 슬통 회사에서 다잡아 키트를 사용해 양성으로 나온 사람이 실제로는 코로나 바이러스에 걸려있을 확률을 97%라며, 키트의 우수성을 주장했다. 이 주장이 옳지 않은 이유를 서술하세요.
```{python}

# P(슬통 회사 지표에서 계산된 발병률) = 실제 양성 / 전체 
result = 385/1085
# P(실제 발병률) = 0.01
real = 0.01

# 실제 발병률과 지표 내 발병률의 차이가 크기 때문에 우수성 주장은 옳지 않다.
```

### 3) Covid‑19 발병률을 사용하여, 키트의 결과값이 양성으로 나온 사람이 실제로 코로나 바이러스에걸려있을 확률을 구하세요.
```{python}

# P(실제양성|키트양성)
# = P(실제양성&키트양성) / P(키트양성)
# = P(실제양성) * P(키트양성| 실제양성) / P(실제양성) * P(키트양성| 실제양성) + P(실제음성) * P(키트양성)
covid_positive = (0.01 * (370 / 385)) / (0.01 * (370 / 385) + 0.99 * (10 / 700))
covid_positive
```

# 카이제곱분포와 표본분산

### 자유도가 𝑘인 카이제곱분포를 따르는 확률변수 𝑋 를 𝑋 ∼ 𝜒2(𝑘) 과 같이 나타내고, 이 확률변수의 확률밀도함수는 다음과 같습니다.
### 𝑓𝑋(𝑥; 𝑘) =1 2𝑘/2Γ(𝑘/2)𝑥𝑘/2−1𝑒−𝑥/2 

### 1) 자유도가 4인 카이제곱분포의 확률밀도함수를 그려보세요.
```{python}

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import chi2, norm

k = np.linspace(0, 40, 500)
y = chi2.pdf(k, df = 4)
plt.plot(k, y, color = "red")
plt.show()

```

### 2) 다음의 확률을 구해보세요.
```{python}
# P (3 ≤ X ≤ 5)
value = chi2.cdf(5, df = 4) - chi2.cdf(3, df = 4)
value
```

### 3) 자유도가 4인 카이제곱분포에서 크기가 1000인 표본을 뽑은 후, 히스토그램을 그려보세요.

```{python}

# 표본 생성
np.random.seed(2024)
chi_x = chi2.rvs(df=4, size=1000)

# 히스토그램 표시
plt.hist(chi_x, bins=50, density=True, color="red", edgecolor="black")
plt.show()
```

### 4) 자유도가 4인 카이제곱분포를 따르는 확률변수에서 나올 수 있는 값 중 상위 5%에 해당하는값은 얼마인지 계산해보세요.

```{python}

chi_value = chi2.ppf(0.95, df = 4) 
chi_value

```

### 5) 3번에서 뽑힌 표본값들 중 상위 5%에 위치한 표본의 값은 얼마인가요?
```{python}

# 표본 내에서 상위 5%에 해당하는 값 계산
threshold_value = np.percentile(chi_x, 95)
threshold_value

```

### 6) 평균이 3, 표준편차가 2인 정규분포를 따르는 확률변수에서 크기가 20인 표본, 𝑥1, ..., 𝑥20,을뽑은 후 표본분산을 계산한 것을 𝑠21이라 생각해보죠.같은 방법으로 500개의 𝑠2 들, 𝑠21, 𝑠2, ..., 𝑠2500 발생시킵니다.발생한 500개의 𝑠2 들 각각에 4.75를 곱하고, 그것들의 히스토그램을 그려보세요. (히스토그램을 그릴 때 probability = TRUE 옵션을 사용해서 그릴 것) 
### 위에서 그린 히스토그램에 자유도가 19인 카이제곱분포 확률밀도함수를 겹쳐그려보세요.

```{python}

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm, chi2

# 1. 랜덤 시드 설정 (재현 가능성 확보)
np.random.seed(2024)

# 2. 정규분포의 평균과 표준편차 설정
loc = 3     # 평균 (mean)
scale = 2   # 표준편차 (standard deviation)

# 3. 샘플의 크기와 샘플링 횟수 설정
n = 20             # 각 샘플의 크기 (샘플당 20개 데이터)
num_samples = 500  # 샘플링 횟수 (총 500개의 샘플 생성)

# 4. 각 샘플의 분산을 저장할 리스트 초기화
var_samples = []

# 5. 500개의 샘플을 생성하고 각 샘플의 분산을 계산하여 리스트에 저장
for i in range(num_samples):
    # 평균 3, 표준편차 2인 정규분포에서 20개의 데이터 샘플링
    x = norm.rvs(loc=loc, scale=scale, size=n)
    
    # 샘플에서 분산 계산 (ddof=1로 표본분산을 계산)
    var_samples.append(np.var(x, ddof=1))

# 6. 계산된 분산 값을 스케일링 (각 분산 값에 4.75를 곱함)
scaled_var_samples = np.array(var_samples) * 4.75

# 7. 스케일된 분산 값의 히스토그램 그리기
plt.hist(scaled_var_samples, bins=50, density=True, color="lightblue", edgecolor="black")
plt.xlabel("4.75 * s^2")
plt.ylabel("density")
 
 ## density=False, 히스토그램의 막대는 각 구간에 속하는 데이터 개수
 ## density=True, 히스토그램의 막대 높이는 **해당 구간에 속하는 데이터의 비율(확률)
 ## 히스토그램의 전체 면적이 1이 되도록 막대의 높이가 조정>다른 크기의 샘플들과 비교하기 쉬워짐.

# 8. 이론적인 카이제곱(χ²) 분포 그리기
x = np.linspace(0, max(scaled_var_samples), 1000)  # x축 값 설정 (0에서 최대 분산 값까지)
pdf_chi19 = chi2.pdf(x, df=19)  # 자유도(df)가 19인 카이제곱 분포의 확률 밀도 함수

# 9. 히스토그램 위에 카이제곱 분포를 파란 점선으로 그리기
plt.plot(x, pdf_chi19, 'b--', linewidth=2)

# 10. 범례 추가 (그래프 설명)
plt.legend(["histogram", "df 19 chisquare dist"], loc="upper right")

# 11. 그래프 표시
plt.show()

```
